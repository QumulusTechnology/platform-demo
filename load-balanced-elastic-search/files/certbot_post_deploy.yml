---
- hosts: localhost
  gather_facts: false
  become: true
  tasks:
    - name: Get OpenStack credentials
      ansible.builtin.shell: |
        . /home/{{ ansible_user }}/openstack-rc.sh
        jq -n \
          --arg username "$OS_USERNAME" \
          --arg password "$OS_PASSWORD" \
          --arg auth_url "$OS_AUTH_URL" \
          --arg project_name "$OS_PROJECT_NAME" \
          --arg user_domain_name "$OS_USER_DOMAIN_NAME" \
          --arg project_domain_name "$OS_PROJECT_DOMAIN_NAME" \
          --arg portal_url "$OS_PORTAL_URL" \
          '{"username": $username, "password": $password, "auth_url": $auth_url, "project_name": $project_name, "user_domain_name", $user_domain_name}'
      register: openstack_credentials

    - name: Set OpenStack credentials as facts
      ansible.builtin.set_fact:
        os_username: "{{ (openstack_credentials.stdout | from_json).username }}"
        os_password: "{{ (openstack_credentials.stdout | from_json).password }}"
        os_auth_url: "{{ (openstack_credentials.stdout | from_json).auth_url }}"
        os_project_name: "{{ (openstack_credentials.stdout | from_json).project_name }}"
        os_user_domain_name: "{{ (openstack_credentials.stdout | from_json).user_domain_name }}"
        os_project_domain_name: "{{ (openstack_credentials.stdout | from_json).user_domain_name }}"

    - name: set domain fact
      set_fact:
        cert_domain: "{{ lookup('ansible.builtin.file', '/home/' + ansible_user + '/domains.json') | from_json | first }}"

    - name: Generate PKCS#12 file
      community.crypto.openssl_pkcs12:
        action: export
        path: "/etc/letsencrypt/live/{{ cert_domain }}/cert.p12"
        friendly_name: "{{ cert_domain }}"
        privatekey_path: "/etc/letsencrypt/live/{{ cert_domain }}/privkey.pem"
        certificate_path: "/etc/letsencrypt/live/{{ cert_domain }}/cert.pem"
        other_certificates: "/etc/letsencrypt/live/{{ cert_domain }}/chain.pem"
        state: present

    - name: Upload certificate to Barbican
      environment:
        OS_USERNAME: "{{ os_username }}"
        OS_PASSWORD: "{{ os_password }}"
        OS_AUTH_URL: "{{ os_auth_url }}"
        OS_PROJECT_NAME: "{{ os_project_name }}"
        OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
        OS_PROJECT_DOMAIN_NAME: "{{ os_project_domain_name }}"
      ansible.builtin.shell: |
        openstack secret store --name='LetsEncrypt-{{ ece_domain }}'  -f value -c 'Secret href' -t 'application/octet-stream' -e 'base64' \
          --payload="$(base64 < /etc/letsencrypt/live/{{ cert_domain }}/cert.p12)"
      register: secret_ref

    - name: Update listeners with new Barbican certificate
      environment:
        OS_USERNAME: "{{ os_username }}"
        OS_PASSWORD: "{{ os_password }}"
        OS_AUTH_URL: "{{ os_auth_url }}"
        OS_PROJECT_NAME: "{{ os_project_name }}"
        OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
        OS_PROJECT_DOMAIN_NAME: "{{ os_project_domain_name }}"
      ansible.builtin.shell: |
        LOAD_BALANCER_ID=$(openstack loadbalancer show ece-load-balancer -c id -f value)
        for LISTENER_ID in $(openstack loadbalancer listener list --loadbalancer $LOAD_BALANCER_ID -c id -c protocol -c protocol_port -f json | jq -r '.[] | select(.protocol == "TERMINATED_HTTPS") | .id'); do
          openstack loadbalancer listener set --default-tls-container-ref "{{ secret_ref.stdout }}" $LISTENER_ID
          sleep 5
        done

    - name: delete old certificates in Barbican
      environment:
        OS_USERNAME: "{{ os_username }}"
        OS_PASSWORD: "{{ os_password }}"
        OS_AUTH_URL: "{{ os_auth_url }}"
        OS_PROJECT_NAME: "{{ os_project_name }}"
        OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
        OS_PROJECT_DOMAIN_NAME: "{{ os_project_domain_name }}"
      ansible.builtin.shell: |
        OLD_CERTIFICATES=$(openstack secret list --name='LetsEncrypt-{{ ece_domain }}' -f value -c 'Secret href')
        for OLD_CERTIFICATE in $OLD_CERTIFICATES; do
          if [ "$OLD_CERTIFICATE" != "{{ secret_ref.stdout }}" ]; then
            openstack secret delete $OLD_CERTIFICATE
          fi
        done
